{"version":3,"sources":["PreferencesTags/_PreferencesTags.js","App.js","serviceWorker.js","index.js"],"names":["PreferencesTags","props","react_default","a","createElement","className","tags","map","tag","i","key","onClick","deleteTag","title","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","preferences","preference","error","bind","assertThisInitialized","inputChange","enterPreference","arguments","undefined","setState","filter","t","toLowerCase","e","_this$setState","defineProperty","target","name","value","trim","newPreferences","slice","push","_this2","_this$state","onChange","onKeyPress","type","placeholder","_PreferencesTags","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7733609.chunk.js","sourcesContent":["import React from 'react';\nimport \"./PreferencesTags.scss\"\n\nconst PreferencesTags = (props) => {\n    return (\n        <div className=\"preferences-tags\">\n            {props.tags.map((tag, i) =>\n                <span key={i} onClick={() => props.deleteTag(tag)} className=\"tag\" title=\"Click to remove preference\">\n                <span className=\"text\">\n                    {tag}\n                </span>\n                <span className=\"remove\">â“§</span>\n                </span>\n            )}\n            {props.tags.length > 1 &&\n                <span onClick={() => props.deleteTag(\"\", true)} className=\"tag remove-all\" title=\"Click to remove all preference\">REMOVE ALL</span>\n            }\n        </div>\n    )\n}\n\nexport default PreferencesTags;","import React, { Component } from 'react';\nimport './App.scss';\nimport PreferencesTags from './PreferencesTags/_PreferencesTags';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      preferences: [\n        \"xxxx\",\n        \"yyyyyyyyyy\",\n        \"xsxsx xsxsxsx\",\n        \"alksdmaslkdnaslnfljandflnadfnadljfnldanf\",\n        \"xxxx sasdasdas asdsadsad asdasdasfd\"\n      ],\n      preference: \"\",\n      error: null\n    }\n    this.deleteTag = this.deleteTag.bind(this)\n    this.inputChange = this.inputChange.bind(this)\n    this.enterPreference = this.enterPreference.bind(this)\n  }\n\n  deleteTag(tag, all = false) {\n    if (all) {\n      this.setState({ preferences: [] })\n    } else if (tag) {\n      let preferences = this.state.preferences.filter((t) => {\n        return tag.toLowerCase() !== t.toLowerCase()\n      })\n      this.setState({ preferences: preferences })\n    }\n  }\n\n  inputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value,\n      error: e.target.value.trim() === \"\" ? \"Preference can't be empty.\" : null\n    })\n  }\n\n  enterPreference(e) {\n    if (e.key == \"Enter\") {\n      const preference = this.state.preference.trim()\n      if (preference === \"\") {\n        this.setState({\n          preference: \"\",\n          error: \"Preference can't be empty.\"\n        })\n      } else {\n        let newPreferences = this.state.preferences.slice()\n        newPreferences.push(preference)\n        this.setState({\n          preference: \"\",\n          preferences: newPreferences,\n          error: null\n        })\n      }\n    }\n  }\n\n  render() {\n    const {preference, preferences, error} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h3 className=\"header\">\n            Allergies/food preferences of guests accompanying you for this reservation\n          </h3>\n          <input\n            name=\"preference\"\n            value={preference}\n            onChange={(e) => this.inputChange(e)}\n            onKeyPress={(e) => this.enterPreference(e)}\n            className=\"preference-input\"\n            type=\"text\"\n            placeholder=\"Type preference and press enter to add\"\n          />\n          {error &&\n            <span className=\"error\">{error}</span>\n          }\n          <span className=\"error\"></span>\n          <PreferencesTags\n            tags={preferences}\n            deleteTag={this.deleteTag}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}